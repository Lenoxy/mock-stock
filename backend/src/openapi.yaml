swagger: "2.0"
info:
  description: "This is an API for a stock-market simulation game. Let users bet with fake money on real market values. Find the code in our [GitHub Repo](https://github.com/the-philip-baumann/mock-stock)"
  version: "1.0"
  title: "Mock-Stock"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
tags:
- name: "stocks"
  description: "Show, buy or sell stocks"
- name: "me"
  description: "Get infos about me"
- name: "users"
  description: "The other users for scoreboard n stuff"
- name: "auth"
  description: "For all your authentication needs"

securityDefinitions:
  cookieAuth:
    type: apiKey
    in: header
    name: Set-Cookie
    description: Session Cookies etc.

paths:
  /stocks:
    get:
      tags:
      - "stocks"
      summary: "Gets list of stocks"
      description: "Gets the stock values from the real market."
      operationId: "getAllStock"
      produces:
      - "application/json"
      parameters:
      - in: "query"
        name: "top"
        description: "Gets only the top so much stocks"
        required: true
        type: "integer"
      - in: "query"
        name: "skip"
        description: "Skips an amount of stocks and then returns the amount of stocks defined in top"
        required: false
        type: "integer"
      responses:
        "200":
          description: "Stocks found"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/SimpleStock"
        "404":
          description: "No stonks today"
  /stocks/{stock}:
    get:
      tags:
      - "stocks"
      summary: "Get the values of provided stock"
      description: "Gets the stock values from the real market."
      operationId: "getStock"
      produces:
      - "application/json"
      parameters:
      - in: "path"
        name: "stock"
        description: "The Stock name e.g. AAPL from which we want the data."
        required: true
        type: "string"
      responses:
        "200":
          description: "Stock found"
          schema:
            $ref: "#/definitions/Stock"
        "404":
          description: "Stock not found"
    put:
      tags:
      - "stocks"
      summary: "Buy or sell stocks"
      description: "Buy or sell an amount of Stocks"
      operationId: "buyStock"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "path"
        name: "stock"
        description: "Stock to buy"
        required: true
        type: "string"
      - in: "body"
        name: "amount"
        description: "Amount to sell if negativ, amount to buy if positiv"
        required: true
        schema:
          type: "integer"
      security:
        - cookieAuth: []
      responses:
        "200":
          description: "Bought or sold stock"
          schema:
            $ref: "#/definitions/Stock"
        "403":
          description: "Not logged in"
        "404":
          description: "Stock not found"
        "405":
          description: "Too poor to buy those stocks *sad face*"
  /me:
    get:
      tags:
      - "me"
      summary: "Get my user data"
      description: "Gets user data"
      operationId: "getMyUser"
      produces:
      - "application/json"
      parameters: []
      security:
        - cookieAuth: []
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"
        "404":
          description: "You don't have any stocks my friend"
  /users:
    get:
      tags:
      - "users"
      summary: "Get users"
      description: "Gets list of users for leaderboard or inspection of other users data"
      operationId: "getUsers"
      produces:
      - "application/json"
      parameters:
      - in: "query"
        name: "top"
        description: "Gets only the top so much users for the leaderboard. If omited, returns all users"
        required: false
        type: "integer"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/SimpleUser"
        "400":
          description: "Couldn't get the users"
  /users/{username}:
    get:
      tags:
      - "users"
      summary: "Get a users data"
      description: "Gets user data"
      operationId: "getUser"
      produces:
      - "application/json"
      parameters:
      - in: "path"
        name: "username"
        description: "The users username whose infos are requested"
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"
        "404":
          description: "Nah dude, you're not gonna get any infos from me about this user"
  /auth/register:
    post:
      tags:
      - "auth"
      summary: "Create user"
      description: "Register a new account. This can be done without being signed in."
      operationId: "createUser"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "User to create, only password and username required"
        required: true
        schema:
          $ref: "#/definitions/AuthRequest"
      responses:
        default:
          description: "successful operation"
  /auth/login:
    post:
      tags:
      - "auth"
      summary: Logs in and returns the authentication  cookie
      parameters:
      - in: "body"
        name: "body"
        description: "Login request"
        required: true
        schema:
          $ref: '#/definitions/AuthRequest'
      security: []    # no authentication
      responses:
        '200':
          description: >
            Successfully authenticated.
            Authentication Cookies are set.
          headers:
            Set-Cookie:
              type: string
              description: JSESSIONID=abcde12345; Path=/; HttpOnly
  /auth/logout:
    post:
      tags:
      - "auth"
      summary: "Logs out current logged in user session"
      description: ""
      operationId: "logoutUser"
      produces:
      - "application/json"
      parameters: []
      security:
        - cookieAuth: []
      responses:
        default:
          description: "successful operation"
definitions:
  Stock:
    type: "object"
    properties:
      id:
        type: "string"
        example: "AAPL"
        description: "ID of stock"
      value:
        type: "number"
        example: 155.3456
        description: "Value of stock in USD"
      name:
        type: "string"
        example: "Apple Inc."
        description: "The Name of the Company"
      amount:
        type: "integer"
        format: "int64"
        example: 3
        description: "The amount of this stock someone holds."
      change:
        type: "number"
        example: -2.93
        description: "How much the stock changed over the last hour"
      valueHistory:
        $ref: "#/definitions/History"
  SimpleStock:
    type: "object"
    properties:
      id:
        type: "string"
        example: "AAPL"
        description: "ID of stock"
      value:
        type: "number"
        example: 155.3456
        description: "Value of stock in USD"
      name:
        type: "string"
        example: "Apple Inc."
        description: "The Name of the Company"
      amount:
        type: "integer"
        format: "int64"
        example: 3
        description: "The amount of this stock someone holds."
      change:
        type: "number"
        example: 2.93
        description: "How much the stock changed over the last hour"
    description: "Stock Dto with less overhead for List views."
  User:
    type: "object"
    properties:
      username:
        type: "string"
        example: "lenoxy"
        description: "The users unique username"
      money_in_stocks:
        type: "number"
        example: "6045.67"
        description: "Total value of stocks from user"
      money_liquid:
        type: "number"
        example: "1045.344"
        description: "Value uf money balance from user"
      score:
        type: "number"
        example: "7091.67"
        description: "Score of the user. This is the liquid money and the money in stocks combined"
      money_in_stocks_history:
        $ref: "#/definitions/History"
      money_liquid_history:
        $ref: "#/definitions/History"
      stocks:
        type: "array"
        items:
          $ref: "#/definitions/SimpleStock"
  SimpleUser:
    type: "object"
    properties:
      username:
        type: "string"
        example: "lenoxy"
        description: "The users unique username"
      money_in_Stocks:
        type: "number"
        example: "6045.67"
        description: "Total value of stocks from user, add to moneyLiquid to get Score"
      money_liquid:
        type: "number"
        example: "1045.344"
        description: "Value uf money balance from user, add to moneyInStocks to get Score"
      score:
        type: "number"
        example: "7091.67"
        description: "Score of the user. This is the liquid money and the money in stocks combined"
    description: "User Dto with less overhead for List views."
  AuthRequest:
    type: "object"
    properties:
      username:
        type: "string"
        example: "Lenoxy"
        description: "The users unique username"
      password:
        type: "string"
        example: "Sugondisnuts"
        description: "The password from the user, used for authentication"
  History:
    type: "object"
    additionalProperties:
      type: "number"
    example:
      "2021-11-01T09:30:00-04:00": 149.42999267578125
      "2021-11-01T09:35:00-04:00": 149.25999450683594
